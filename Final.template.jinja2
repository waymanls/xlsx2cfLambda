{% block content %}
{% endblock content %}

########################################################################################
#                                     DATABASES                                        #
########################################################################################
  sotcdb:
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: false
      Engine: Postgres
      EnvironmentName: TP1
      EngineVersion: 11.1
      AllocatedStorage: 1200.0
      StorageType: gp2
      DBInstanceClass: db.r5.2xlarge
      AvailabilityZone: us-east-1
      BackupRetentionPeriod: 7.0
      DBInstanceIdentifier: sotcdb
      VPCSecurityGroups: sg-0000000
      DBSubnetGroupName: subnet-0000000
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      ArchitectureID: xx-sd2a:d
      MissionOwner: SOTD
      Office: SampleOffice
      Product: SampleProduct
      WorkloadType: aaaa
      Startup: 700.0
      Shutdown: 2100.0
      Schedule: Always
      ClapOn: 700
      ClapOff: 2100
      KmsKeyId: !If [IsEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      StorageEncrypted: !If [IsEncrypted, True, False]
      LicenseModel: !If [IsSQLServer, "license-included", !Ref "AWS::NoValue"]
      Tags:
      - Key: Name
        Value: sotcdb
      - Key: Environment
        Value: TP1
      - Key: ArchitectureID
        Value: xx-sd2a:d
      - Key: MissionOwner
        Value: SOTD
      - Key: Office
        Value: SampleOffice
      - Key: Product
        Value: SampleProduct
      - Key: WorkloadType
        Value: aaaa
      - Key: Startup
        Value: 700.0
      - Key: Shutdown
        Value: 2100.0
      - Key: Schedule
        Value: Always
      - Key: ClapOn 
        Value: !Ref ClapOn
      - Key: ClapOff 
        Value: !Ref ClapOff
    DeletionPolicy: Snapshot
########################################################################################
#                                     INSTANCES                                        #
########################################################################################

  uctp1sotdpub01:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full:
          - cfn-hup-config
          - aws-pre-config
          - hostnameChange
          - domainjoinconfig
          - cleanup-chef
          - chef
          - signal-complete
          light:
          - cfn-hup-config
          - aws-pre-config
          - hostnameChange
          - domainjoinconfig
          - cleanup-chef
          - signal-complete
        hostnameChange:
          commands:
            alpha hostname command:
              command:
                Fn::Join:
                - ''
                - - 'powershell Rename-Computer -NewName '
                  - uctp1sotdpub01
                  - ' -Restart;'
              waitAfterCompletion: forever
        cfn-hup-config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.uctp1sotdpub01.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --verbose --configsets updatable-only --region ${AWS::Region} --resource uctp1sotdpub01 --role ${RoleName} --stack ${AWS::StackId} --url ${CFEndpoint}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        aws-pre-config:
          commands:
            create-aws-dir:
              command: mkdir c:\Windows\System32\config\systemprofile\.aws
              ignoreErrors: true
        domainjoinconfig:
          files:
            c:\Windows\System32\config\systemprofile\.aws\config:
              content: !Sub |
                [default]
                region=${AWS::Region}
          commands:
            join-domain-rename-and-restart:
              command: {"Fn::Sub" :
                "powershell.exe -Command \"&{
                mkdir C:/Temp;
                cd \"C:/PROGRA~1/Amazon/AWSCLI\";
                aws --region ${AWS::Region} s3 cp s3://${DevOpsBucket}/password-file.txt C:/Temp/password-file.txt;
                aws --region ${AWS::Region} kms decrypt --ciphertext-blob fileb://C:/Temp/password-file.txt --output text --query Plaintext > C:/Temp/password-decrypted.txt;
                certutil -decode C:/Temp/password-decrypted.txt C:/Temp/plain-password-decrypted.txt;
                $password = type C:/Temp/plain-password-decrypted.txt | ConvertTo-SecureString -asPlainText -Force;
                $username = '${ExploitDomainAccount}';
                $credential = New-Object System.Management.Automation.PSCredential($username,$password);
		$adapter = Get-NetAdapter;
		$adapterName = $adapter.Name;
                Get-DnsClientServerAddress -InterfaceAlias $adapterName | select -ExpandProperty interfaceindex | %{Set-DnsClientServerAddress -InterfaceIndex $_ -ServerAddresses ('${DomainController}')};
                Add-Computer -DomainName '${DomainName}' -Credential $credential -OUPath '${OuPath}' -PassThru;
		rm C:/Temp/password-file.txt;
		rm C:/Temp/password-decrypted.txt;
		rm C:/Temp/plain-password-decrypted.txt;
                shutdown -r -t 120;
                }\""}
              waitAfterCompletion: !If [IsGovCloud, forever, 0]
        cleanup-chef:
          commands:
            1-install-tools:
              command: !Sub aws --region ${AWS::Region} s3 cp s3://${SoftwareBucket}/Chef/chef-client-14.10.9-1-x64.msi C:\
              ignoreErrors: true
              waitAfterCompletion: 0
            2-install-tools-2:
              command: !Sub msiexec /qb -i C:\chef-client-14.10.9-1-x64.msi
              ignoreErrors: true
              waitAfterCompletion: 0
            3-remove-admin-files:
              command: del /Q C:\chef\client.pem & del /Q C:\chef\knife.rb
              ignoreErrors: true
              waitAfterCompletion: 0
            4-install-tools-3:
              command: !Sub aws --region ${AWS::Region} s3 sync s3://${SoftwareBucket}/Chef/misc_files/ C:\chef\
              ignoreErrors: true
              waitAfterCompletion: 0
            5-knife-ssl-fetch:
              command: !Sub knife ssl --config C:\chef\config.rb fetch
              cwd: C:\chef
              ignoreErrors: true
              waitAfterCompletion: 0
            6-knife-client-delete:
              command: !Sub knife client --config C:\chef\config.rb delete -y ${Hostname}.${DomainName}
              cwd: C:\chef
              ignoreErrors: true
              waitAfterCompletion: 0
        chef:
          commands:
            chef command:
              command: !Sub
                - >
                  C:\opscode\chef\bin\chef-client
                  -N ${Hostname}.${DomainName}
                  -E ${CloudEnvironment}-${EnvironmentName}
                  -o ${ChefRole}
                  >> C:\chef\chef-client-output.log &
                  if errorlevel 1 (
                  cfn-signal.exe
                  --exit-code 1
                  --reason "Error in chef-client run"
                  --region ${AWS::Region}
                  --role ${RoleName}
                  --url ${CFEndpoint}
                  ${EncodedHandle} &
                  exit /b 1
                  )
                - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
              waitAfterCompletion: 0
        signal-complete:
          commands:
            run-cfn-signal:
              command: !Sub
                - >
                  set "AWS_DEFAULT_REGION=${AWS::Region}" &
                  cfn-signal.exe
                  --exit-code %ERRORLEVEL%
                  --reason "Complete"
                  --region ${AWS::Region}
                  --role ${RoleName}
                  --url ${CFEndpoint}
                  ${EncodedHandle}
                - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
              waitAfterCompletion: 0
    Properties:
      AvailabilityZone: us-west-1
      IamInstanceProfile: !Ref RoleName
      NetworkInterfaces:
        - DeviceIndex: '0'
          GroupSet: sg-1111111
          SubnetId: subnet-1111111
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            cfn-init.exe `
              --verbose `
              --stack ${AWS::StackName} `
              --configsets ${InstanceConfig} `
              --resource uctp1sotdpub01 `
              --role ${RoleName} `
              --region ${AWS::Region} `
              --url ${CFEndpoint}

            if (!$?) {
              cfn-signal.exe `
              --exit-code 1 `
              --reason "Error in cfn-init" `
              --region ${AWS::Region} `
              --role ${RoleName} `
              --stack ${AWS::StackName} `
              --url ${CFEndpoint} `
              ${EncodedHandle}
            }
            </powershell>
          - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
      InstanceType: m5.large
      KeyName: !Ref KeyName
      SourceDestCheck: 'false'
      ImageId: ami-1111111
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 150.0
            VolumeType: gp2
            Encrypted: !If [IsRootEBSEncrypted, true, false]
            KmsKeyId: !If [IsRootEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Volumes: !If
        - IsAddVol
        # If IsAddVol
        - - Device: /dev/xvdf
            VolumeId: !Ref EBSVolume1
          - Device: /dev/xvdg
            VolumeId: !Ref EBSVolume2
        # Else
        - - Device: /dev/xvdf
            VolumeId: !Ref EBSVolume1
      Tags:
        - Key: Name
          Value: uctp1sotdpub01
        - Key: Hostname
          Value: uctp1sotdpub01 
        - Key: Environment
          Value: TP1
        - Key: ArchitectureID
          Value: xx-sd4b
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct
        - Key: ServerType
          Value: Publishing Server
        - Key: Startup
          Value: 700.0 
        - Key: Shutdown
          Value: 1700.0 
        - Key: Schedule
          Value: MonTueWedThuFri 
        - Key: JiraTicket 
          Value: !Ref JiraTicket
  EBSVolume1:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 150.0
      VolumeType : gp2
      Encrypted: !If [IsEBSEncrypted, true, false]
      KmsKeyId: !If [IsEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: uctp1sotdpub01
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct
  EBSVolume2:
    # Volume2 is only created based on a parameter set in the parameter file.
    # And encrypted of other conditions are met.  
    Condition: IsAddVol
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: us-west-1
      Size: 200.0
      VolumeType : gp2
      Encrypted: !If [IsEBSEncrypted, true, false]
      KmsKeyId: !If [IsEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: uctp1sotdpub01
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct

########################################################################################
#                                     INSTANCES                                        #
########################################################################################

  uctp1sotdags01:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full:
          - cfn-hup-config
          - aws-pre-config
          - hostnameChange
          - domainjoinconfig
          - cleanup-chef
          - chef
          - signal-complete
          light:
          - cfn-hup-config
          - aws-pre-config
          - hostnameChange
          - domainjoinconfig
          - cleanup-chef
          - signal-complete
        hostnameChange:
          commands:
            alpha hostname command:
              command:
                Fn::Join:
                - ''
                - - 'powershell Rename-Computer -NewName '
                  - uctp1sotdags01
                  - ' -Restart;'
              waitAfterCompletion: forever
        cfn-hup-config:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
                verbose=true
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.uctp1sotdags01.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe --verbose --configsets updatable-only --region ${AWS::Region} --resource uctp1sotdags01 --role ${RoleName} --stack ${AWS::StackId} --url ${CFEndpoint}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        aws-pre-config:
          commands:
            create-aws-dir:
              command: mkdir c:\Windows\System32\config\systemprofile\.aws
              ignoreErrors: true
        domainjoinconfig:
          files:
            c:\Windows\System32\config\systemprofile\.aws\config:
              content: !Sub |
                [default]
                region=${AWS::Region}
          commands:
            join-domain-rename-and-restart:
              command: {"Fn::Sub" :
                "powershell.exe -Command \"&{
                mkdir C:/Temp;
                cd \"C:/PROGRA~1/Amazon/AWSCLI\";
                aws --region ${AWS::Region} s3 cp s3://${DevOpsBucket}/password-file.txt C:/Temp/password-file.txt;
                aws --region ${AWS::Region} kms decrypt --ciphertext-blob fileb://C:/Temp/password-file.txt --output text --query Plaintext > C:/Temp/password-decrypted.txt;
                certutil -decode C:/Temp/password-decrypted.txt C:/Temp/plain-password-decrypted.txt;
                $password = type C:/Temp/plain-password-decrypted.txt | ConvertTo-SecureString -asPlainText -Force;
                $username = '${ExploitDomainAccount}';
                $credential = New-Object System.Management.Automation.PSCredential($username,$password);
		$adapter = Get-NetAdapter;
		$adapterName = $adapter.Name;
                Get-DnsClientServerAddress -InterfaceAlias $adapterName | select -ExpandProperty interfaceindex | %{Set-DnsClientServerAddress -InterfaceIndex $_ -ServerAddresses ('${DomainController}')};
                Add-Computer -DomainName '${DomainName}' -Credential $credential -OUPath '${OuPath}' -PassThru;
		rm C:/Temp/password-file.txt;
		rm C:/Temp/password-decrypted.txt;
		rm C:/Temp/plain-password-decrypted.txt;
                shutdown -r -t 120;
                }\""}
              waitAfterCompletion: !If [IsGovCloud, forever, 0]
        cleanup-chef:
          commands:
            1-install-tools:
              command: !Sub aws --region ${AWS::Region} s3 cp s3://${SoftwareBucket}/Chef/chef-client-14.10.9-1-x64.msi C:\
              ignoreErrors: true
              waitAfterCompletion: 0
            2-install-tools-2:
              command: !Sub msiexec /qb -i C:\chef-client-14.10.9-1-x64.msi
              ignoreErrors: true
              waitAfterCompletion: 0
            3-remove-admin-files:
              command: del /Q C:\chef\client.pem & del /Q C:\chef\knife.rb
              ignoreErrors: true
              waitAfterCompletion: 0
            4-install-tools-3:
              command: !Sub aws --region ${AWS::Region} s3 sync s3://${SoftwareBucket}/Chef/misc_files/ C:\chef\
              ignoreErrors: true
              waitAfterCompletion: 0
            5-knife-ssl-fetch:
              command: !Sub knife ssl --config C:\chef\config.rb fetch
              cwd: C:\chef
              ignoreErrors: true
              waitAfterCompletion: 0
            6-knife-client-delete:
              command: !Sub knife client --config C:\chef\config.rb delete -y ${Hostname}.${DomainName}
              cwd: C:\chef
              ignoreErrors: true
              waitAfterCompletion: 0
        chef:
          commands:
            chef command:
              command: !Sub
                - >
                  C:\opscode\chef\bin\chef-client
                  -N ${Hostname}.${DomainName}
                  -E ${CloudEnvironment}-${EnvironmentName}
                  -o ${ChefRole}
                  >> C:\chef\chef-client-output.log &
                  if errorlevel 1 (
                  cfn-signal.exe
                  --exit-code 1
                  --reason "Error in chef-client run"
                  --region ${AWS::Region}
                  --role ${RoleName}
                  --url ${CFEndpoint}
                  ${EncodedHandle} &
                  exit /b 1
                  )
                - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
              waitAfterCompletion: 0
        signal-complete:
          commands:
            run-cfn-signal:
              command: !Sub
                - >
                  set "AWS_DEFAULT_REGION=${AWS::Region}" &
                  cfn-signal.exe
                  --exit-code %ERRORLEVEL%
                  --reason "Complete"
                  --region ${AWS::Region}
                  --role ${RoleName}
                  --url ${CFEndpoint}
                  ${EncodedHandle}
                - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
              waitAfterCompletion: 0
    Properties:
      AvailabilityZone: us-central-2
      IamInstanceProfile: !Ref RoleName
      NetworkInterfaces:
        - DeviceIndex: '0'
          GroupSet: sg-2222222
          SubnetId: subnet-2222222
      UserData:
        Fn::Base64: !Sub
          - |
            <powershell>
            cfn-init.exe `
              --verbose `
              --stack ${AWS::StackName} `
              --configsets ${InstanceConfig} `
              --resource uctp1sotdags01 `
              --role ${RoleName} `
              --region ${AWS::Region} `
              --url ${CFEndpoint}

            if (!$?) {
              cfn-signal.exe `
              --exit-code 1 `
              --reason "Error in cfn-init" `
              --region ${AWS::Region} `
              --role ${RoleName} `
              --stack ${AWS::StackName} `
              --url ${CFEndpoint} `
              ${EncodedHandle}
            }
            </powershell>
          - {EncodedHandle: {"Fn::Base64": !Ref CurrentStackWaitHandle}}
      InstanceType: m5.large
      KeyName: !Ref KeyName
      SourceDestCheck: 'false'
      ImageId: ami-2222222
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 150.0
            VolumeType: gp2
            Encrypted: !If [IsRootEBSEncrypted, true, false]
            KmsKeyId: !If [IsRootEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Volumes: !If
        - IsAddVol
        # If IsAddVol
        - - Device: /dev/xvdf
            VolumeId: !Ref EBSVolume1
          - Device: /dev/xvdg
            VolumeId: !Ref EBSVolume2
        # Else
        - - Device: /dev/xvdf
            VolumeId: !Ref EBSVolume1
      Tags:
        - Key: Name
          Value: uctp1sotdags01
        - Key: Hostname
          Value: uctp1sotdags01 
        - Key: Environment
          Value: TP1
        - Key: ArchitectureID
          Value: xx-sd6b
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct
        - Key: ServerType
          Value: ArcGIS Server
        - Key: Startup
          Value: 700.0 
        - Key: Shutdown
          Value: 1700.0 
        - Key: Schedule
          Value: SatSun 
        - Key: JiraTicket 
          Value: !Ref JiraTicket
  EBSVolume1:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 150.0
      VolumeType : gp2
      Encrypted: !If [IsEBSEncrypted, true, false]
      KmsKeyId: !If [IsEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: uctp1sotdags01
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct
  EBSVolume2:
    # Volume2 is only created based on a parameter set in the parameter file.
    # And encrypted of other conditions are met.  
    Condition: IsAddVol
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: us-central-2
      Size: 150.0
      VolumeType : gp2
      Encrypted: !If [IsEBSEncrypted, true, false]
      KmsKeyId: !If [IsEBSEncrypted, !Ref BlockEncryptionKey, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: uctp1sotdags01
        - Key: MissionOwner
          Value: SOTD
        - Key: Office
          Value: SampleOffice
        - Key: Product
          Value: SampleProduct

